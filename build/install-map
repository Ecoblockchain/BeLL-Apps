#!/usr/bin/env node

/**
 * Module dependencies.
 */

var sys = require('sys')
var exec = require('child_process').exec;
var _ = require('underscore')
var request = require('request')
var program = require('commander');
var fs = require('fs')
var replicatorInstaller = require('./includes/replicator-installer')
var csv = require('csv')
function puts(error, stdout, stderr) { sys.puts(stdout) } 

program
  .version('0.0.1')
  .option('-t, --to [to]', '', '')
  .option('-m, --mapfile [mapfile]', '', null)
  .option('-c, --continuous', 'make continuous')
  .option('-n, --create_target', 'create the target')
  .parse(process.argv);

var mapfile = program.mapfile 
var to = program.to
var continuous = program.continuous
var create_target = program.create_target
var replicationMap

csv()
.from.path( mapfile, { delimiter: ',', escape: '"' })
.to.array( function(data){
  replicationMap = data

console.log(replicationMap)

var i = 0
var hosts = []
replicatorDocs = []
cmd = ''

replicationMap.forEach(function(row) {
  if(i == 0) {
    hosts[0] = row[0]
    hosts[1] = row[2] 
    i++
  }
  else {
    if (row[1].search('<') != -1) {
      var db = row[0]
      replicatorDocs.push({
        //_id: hosts[1] + '/' + db + '__to__' + hosts[0] + '/' + db, 
        source: 'http://' + hosts[1] + '/' + db, 
        target: 'http://' + hosts[0] + '/' + db,
        create_target: create_target,
        continuous: continuous
      })
    }
    if (row[1].search('>') != -1) {
      var db = row[0]
      replicatorDocs.push({
        //_id: hosts[0] + '/' + db + '__to__' + hosts[1] + '/' + db, 
        source: 'http://' + hosts[0] + '/' + db, 
        target: 'http://' + hosts[1] + '/' + db,
        create_target: create_target,
        continuous: continuous
      })
    }
  }
})

replicatorDocs.forEach(function(doc) {
  cmd += 'curl -XPOST ' + to + ' -H "Content-Type: application/json" -d \'' + JSON.stringify(doc) + '\' ; \n' 
}) 

console.log(cmd)
exec(cmd, puts)
        




} );
